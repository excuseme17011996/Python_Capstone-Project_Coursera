WEBVTT

1
00:00:08.968 --> 00:00:12.530
So we're coming to our final thing
that we're going to do with our data.

2
00:00:12.530 --> 00:00:15.480
We've gone through the two to
three days of scanning data.

3
00:00:15.480 --> 00:00:18.885
We've gone to the five to ten
minutes of cleaning up data,

4
00:00:18.885 --> 00:00:21.118
the modeling that cleans up the data.

5
00:00:21.118 --> 00:00:23.651
And we've been doing things
on this clean data and

6
00:00:23.651 --> 00:00:26.560
we're seeing that these
programs are a little simpler.

7
00:00:26.560 --> 00:00:29.300
And these turn out to be the hardest
thing that you're going to do.

8
00:00:29.300 --> 00:00:32.420
And you tend to do
the cleaning data just once.

9
00:00:32.420 --> 00:00:35.690
And so now we're going to look
at the last of these things.

10
00:00:35.690 --> 00:00:38.420
And that is the thing that's
going to draw us a line.

11
00:00:38.420 --> 00:00:42.120
And again we're going to use the d3, and
I've got some code already written that

12
00:00:42.120 --> 00:00:45.770
does visualization, and
it reads the data gline.js.

13
00:00:45.770 --> 00:00:50.058
Which has really sort of the legend and
all the points in here, and a legend at

14
00:00:50.058 --> 00:00:54.358
the bottom, the x-axes, and again I
just borrowed this example from d3.

15
00:00:54.358 --> 00:00:57.865
I looked at what the data format was
supposed to be like in their sample, and

16
00:00:57.865 --> 00:01:00.480
then I said to myself,
how can I write a Python program

17
00:01:00.480 --> 00:01:02.280
that's going to work with this stuff?

18
00:01:02.280 --> 00:01:06.448
So, I wrote very little of this,
I just borrowed it from d3.js.

19
00:01:06.448 --> 00:01:09.630
And then, all my cleverness is
getting to write that file.

20
00:01:09.630 --> 00:01:13.690
So you'll see, when we get to
that program, that it creates,

21
00:01:13.690 --> 00:01:16.380
it reads some data,
creates some memory structures, and

22
00:01:16.380 --> 00:01:19.610
then dumps those memory structures
into this JavaScript data

23
00:01:19.610 --> 00:01:23.930
in the exact format that
the d3 thing wants and

24
00:01:23.930 --> 00:01:26.120
away we go with the easy visualization.

25
00:01:26.120 --> 00:01:29.080
So let's take a look at the code
that we're going to be running here.

26
00:01:30.920 --> 00:01:33.330
Let's just go with the gline.

27
00:01:33.330 --> 00:01:36.110
It turns out that there
are two apps that do this.

28
00:01:36.110 --> 00:01:38.140
One that shows you by years.

29
00:01:38.140 --> 00:01:41.420
Let's just do it with years,
they're so similar.

30
00:01:41.420 --> 00:01:43.580
I'll show you gyear first.

31
00:01:43.580 --> 00:01:49.730
Okay, at this point, right, at this point,
we are going to be counting the senders

32
00:01:51.220 --> 00:01:56.170
by top ten organizations and
sending over time.

33
00:01:56.170 --> 00:02:00.090
So, we are going to open
a database connection,

34
00:02:00.090 --> 00:02:01.990
we are going to write a little join.

35
00:02:01.990 --> 00:02:05.270
This time we are interested
in the senders.

36
00:02:05.270 --> 00:02:07.100
The first thing we're going to
do is figure out what those top

37
00:02:07.100 --> 00:02:10.290
ten organizations are, okay?

38
00:02:10.290 --> 00:02:13.830
And so we're just going to read
through all the senders, so

39
00:02:13.830 --> 00:02:16.270
we're going through
the whole database once.

40
00:02:16.270 --> 00:02:19.630
If your call list is well over 100
megabytes you'll see how fast this runs,

41
00:02:19.630 --> 00:02:20.810
when it runs.

42
00:02:20.810 --> 00:02:23.470
And all we're really doing,
we're not even looking for the people.

43
00:02:23.470 --> 00:02:25.860
We're pulling out the sender's name.

44
00:02:25.860 --> 00:02:30.268
And then we are splitting it, and
checking to see what the domain name is.

45
00:02:30.268 --> 00:02:34.070
And then taking the organization and
counting then how many messages.

46
00:02:34.070 --> 00:02:35.890
We're not worried about the dates or
times or anything.

47
00:02:35.890 --> 00:02:40.690
For now, we're just interested in coming
up with the top ten organizations.

48
00:02:40.690 --> 00:02:46.050
So now we're going to use sorted to get
the keys for the highest ten values.

49
00:02:46.050 --> 00:02:48.530
And so this is all it takes in Python.

50
00:02:48.530 --> 00:02:55.080
Give me back a, from the dictionary
sendorgs, give me a list of keys,

51
00:02:55.080 --> 00:02:59.510
sorted by value, reverse equals true
means the highest one is first on down.

52
00:02:59.510 --> 00:03:02.840
And I'm like I just want the top ten so
I just use a slicing operators,

53
00:03:02.840 --> 00:03:07.780
orgs = orgs up to but not including ten,
so that's zero through nine.

54
00:03:07.780 --> 00:03:10.030
And then I print that out,
print out the top ten organizations.

55
00:03:10.030 --> 00:03:13.180
Let me go ahead and run that, and
you'll see just how quick that runs.

56
00:03:14.850 --> 00:03:18.480
Python gyear, so I'm going to
read this whole database twice.

57
00:03:18.480 --> 00:03:20.959
The first time is just to figure out
what the top ten organizations are.

58
00:03:23.110 --> 00:03:26.470
So, that's how fast it was, and
this is the data down here,

59
00:03:26.470 --> 00:03:28.780
but those are the top ten organizations.

60
00:03:28.780 --> 00:03:31.370
So, that's how fast it came out, okay?

61
00:03:31.370 --> 00:03:35.368
So, that reads the whole database in
like almost a blink of an eye.

62
00:03:35.368 --> 00:03:36.987
And it should go fast on your computer,

63
00:03:36.987 --> 00:03:39.730
even if you don't have
a super fast hard drive.

64
00:03:39.730 --> 00:03:43.140
Okay, so now we're going to read again.
We know what the top ten organizations are,

65
00:03:43.140 --> 00:03:45.570
and they live in this orgs,
and that way we can.

66
00:03:45.570 --> 00:03:48.340
We're just going to use that
to filter data basically.

67
00:03:48.340 --> 00:03:52.000
And so we're going to create two
dictionaries, one are the counts and

68
00:03:52.000 --> 00:03:54.270
the next is a list of all the years.

69
00:03:55.490 --> 00:03:59.220
And so then we're going to select
the messages and the sender and

70
00:03:59.220 --> 00:04:00.840
when it was sent,
because we need the date.

71
00:04:00.840 --> 00:04:04.940
And then we're joining all the stuff
up together with an on clause and

72
00:04:04.940 --> 00:04:08.430
then we're going to loop through all the
records we get from that database query.

73
00:04:08.430 --> 00:04:13.050
For message_row in cur,
well the sub one is who sent it.

74
00:04:13.050 --> 00:04:18.150
The sub two is when it was sent.

75
00:04:18.150 --> 00:04:23.210
And so we read through, and this pretty
much is the same as we did before.

76
00:04:23.210 --> 00:04:26.470
We get the sender, we split it with
the at sign because we're looking for

77
00:04:26.470 --> 00:04:28.880
the domain name to get pieces sub one, and

78
00:04:28.880 --> 00:04:33.030
now this little bit of code right here
basically is our let's only keep the top ten.

79
00:04:33.030 --> 00:04:35.930
So if the domain is not in those top
ten organizations that we computed

80
00:04:35.930 --> 00:04:37.880
previously, skip it.

81
00:04:37.880 --> 00:04:41.140
So now we've got a bit of
data that we want to get.

82
00:04:41.140 --> 00:04:47.020
And so we're going to take the date and
if you look at the date it basically is

83
00:04:47.020 --> 00:04:54.080
a year dash four-digit year dash two-digit 
day month dash two-digit day.

84
00:04:54.080 --> 00:04:57.287
And so
if message row two is the date, up to but

85
00:04:57.287 --> 00:05:01.466
not including 4 is the first
4 characters of that date.

86
00:05:01.466 --> 00:05:06.252
And so that's how we're getting
things like 2010 from things

87
00:05:06.252 --> 00:05:10.878
that are like 2010-06-09,
for June 9, 2010.

88
00:05:10.878 --> 00:05:16.230
And so that up to but
not including 4 is getting us that year.

89
00:05:17.300 --> 00:05:20.930
And then we're going to make
a list of all the years, right?

90
00:05:20.930 --> 00:05:24.230
And here we just want
all the years we've got.

91
00:05:24.230 --> 00:05:26.710
You'll see when we produce the data,
we need this.

92
00:05:26.710 --> 00:05:30.890
So if the year is not in the list years,
the year we're looking at, then append it.

93
00:05:30.890 --> 00:05:34.652
This again is just one per year.

94
00:05:34.652 --> 00:05:38.420
And then to gather the count
we're actually going to

95
00:05:38.420 --> 00:05:40.490
have a key that's a tuple.

96
00:05:41.920 --> 00:05:46.460
And we're, in a sense, taking each one of
these little data points and accumulating.

97
00:05:46.460 --> 00:05:52.120
For each organization, year combination,
we've gotta separately accumulate data.

98
00:05:52.120 --> 00:05:54.990
So we are going to have
a dictionary of counts

99
00:05:54.990 --> 00:05:57.950
where the key is year comma domain name.

100
00:05:59.030 --> 00:06:01.358
All right so if I,
let me just pop this data up here.

101
00:06:07.478 --> 00:06:11.090
So each one of these,
each one of these is a count.

102
00:06:11.090 --> 00:06:15.730
So for each year, we have one count for
every domain name.

103
00:06:15.730 --> 00:06:20.410
So it's not just one histogram,
it's basically ten histograms.

104
00:06:20.410 --> 00:06:24.070
The top ten organizations and
then a histogram for each year.

105
00:06:25.920 --> 00:06:31.520
But we're using one dictionary and
a key that is organization comma year.

106
00:06:31.520 --> 00:06:36.219
So organization is one part of that tuple,
and year is the other part of that tuple.

107
00:06:37.480 --> 00:06:41.240
And that shows up right here.

108
00:06:41.240 --> 00:06:45.040
The key is the year and the domain name,
the combination of the year and

109
00:06:45.040 --> 00:06:46.360
the domain name.

110
00:06:46.360 --> 00:06:50.030
And that, because it's a tuple,
can be used as the key in a dictionary.

111
00:06:51.340 --> 00:06:53.630
And so then we're just
doing a simple calculation.

112
00:06:55.180 --> 00:06:58.500
And then we have one more for
all of the domains.

113
00:06:58.500 --> 00:06:59.828
We'll call that one total.

114
00:06:59.828 --> 00:07:03.516
And so, it's another computation for
each year total and

115
00:07:03.516 --> 00:07:06.310
this is the running total for
all the years.

116
00:07:06.310 --> 00:07:11.280
And, again, that's just running all
that stuff. Then, we're done with that.

117
00:07:11.280 --> 00:07:15.870
We've created totals for
each of those little spots, each of those,

118
00:07:15.870 --> 00:07:19.070
it's like a grid of totals basically at
that point because we're kind of using

119
00:07:19.070 --> 00:07:21.190
a tuple as the key.

120
00:07:21.190 --> 00:07:24.259
We're sorting based on the year, so
that it goes up, the lowest year first,

121
00:07:24.259 --> 00:07:26.166
because we might not,
it should be sorted that way.

122
00:07:26.166 --> 00:07:29.090
Then we're going to print
out the counts of the years.

123
00:07:29.090 --> 00:07:31.100
And that's printing this stuff out.

124
00:07:31.100 --> 00:07:34.340
So, here is the counts.

125
00:07:34.340 --> 00:07:38.350
And, somewhere,
there's lots of stuff in the counts.

126
00:07:41.120 --> 00:07:42.430
That's the counts.

127
00:07:42.430 --> 00:07:46.610
And if you look at each count,
the key is a tuple.

128
00:07:46.610 --> 00:07:51.490
So that is the number of email
messages in 2012 from Berkeley.

129
00:07:51.490 --> 00:07:56.125
And this is the number of email
messages, 449 is the number of

130
00:07:56.125 --> 00:07:59.708
email messages in 2008 from unicon.net.

131
00:07:59.708 --> 00:08:04.302
So by using this as the key in my
dictionary, I'm separately able to

132
00:08:04.302 --> 00:08:10.550
accumulate each one of these histograms
for the year, organization combination.

133
00:08:10.550 --> 00:08:14.381
And then I can just print
out the the years, that's so

134
00:08:14.381 --> 00:08:17.546
that I can get the data to
come out the way I want.

135
00:08:17.546 --> 00:08:19.657
And then, of course,
I have the organizations,

136
00:08:19.657 --> 00:08:21.980
the top ten organizations,
in a list as well.

137
00:08:21.980 --> 00:08:27.730
So I've got the organizations, this to
that, which is the y axis. Well, no.

138
00:08:27.730 --> 00:08:32.356
It's counts is the Y axis, organizations is
the different lines that I'm going to do.

139
00:08:32.356 --> 00:08:36.770
So let's just take a look at the data
we're going to produce at this point.

140
00:08:36.770 --> 00:08:43.528
And it's called gline.js and
this is just an array of arrays.

141
00:08:43.528 --> 00:08:48.630
The first array,
it's basically all the data.

142
00:08:48.630 --> 00:08:50.680
This is the x value and all the y values.

143
00:08:50.680 --> 00:08:52.120
X value, all the y values.

144
00:08:52.120 --> 00:08:53.880
X value, all the y values.

145
00:08:53.880 --> 00:08:55.940
So this is the number of x's and

146
00:08:55.940 --> 00:09:01.910
then the first one is just the legend
that basically is, what year it is.

147
00:09:01.910 --> 00:09:06.500
This is the umich number, this is
the gmail numbers, etc., etc., etc.

148
00:09:06.500 --> 00:09:11.010
We got all these sorted nicely so
they're going to come out nice.

149
00:09:11.010 --> 00:09:14.443
And that's the data that we've gotta have,
that's the data we're going to produce so

150
00:09:14.443 --> 00:09:16.648
let's take a look at the code
that produces that data.

151
00:09:16.648 --> 00:09:19.437
You've got a construct,
I open the file for writing,

152
00:09:19.437 --> 00:09:22.220
I print out the little gline equals,
the year.

153
00:09:22.220 --> 00:09:24.960
Then I loop through and
print out all the organizations with

154
00:09:24.960 --> 00:09:30.180
single quotes around each organization and
then I a thing and put a comma.

155
00:09:30.180 --> 00:09:32.640
You know, in all these things
that you've gotta get right.

156
00:09:32.640 --> 00:09:36.490
So, then what we do is we
have two nested loops.

157
00:09:36.490 --> 00:09:39.000
First we're going to go
outer through the years.

158
00:09:40.650 --> 00:09:43.518
The outer loop is year,
year, year, year, year.

159
00:09:43.518 --> 00:09:46.748
And then the inner loop is
across all the organizations.

160
00:09:46.748 --> 00:09:50.510
So we're going to loop through all
combinations of years and organizations.

161
00:09:50.510 --> 00:09:53.050
Print the year out as
the first part of that,

162
00:09:53.050 --> 00:09:55.770
which prints out this
little thing right there.

163
00:09:55.770 --> 00:09:59.520
Then we're going to go through, and
go through all the organizations.

164
00:09:59.520 --> 00:10:02.150
We have lists that are all the years and
all the organizations, so

165
00:10:02.150 --> 00:10:04.530
we're looking at all the components.

166
00:10:04.530 --> 00:10:07.380
All the possible combinations of orgs and
years.

167
00:10:07.380 --> 00:10:10.260
We make a key, which is a tuple,
which is year, organization,

168
00:10:10.260 --> 00:10:13.420
just like when we were accumulating
the data, and we do a retrieval.

169
00:10:13.420 --> 00:10:17.390
Now you have to use a get, because
if we never, for a particular year,

170
00:10:17.390 --> 00:10:21.190
we never saw a single message for that
organization, we have to assume it's zero.

171
00:10:21.190 --> 00:10:23.291
So this key might not always exist,

172
00:10:23.291 --> 00:10:27.648
this might not be every single grid
point might not be represented there.

173
00:10:27.648 --> 00:10:32.050
And then we just print that out and then
print the slash at the end of the line.

174
00:10:33.690 --> 00:10:39.690
And then cleverly print out when do I put
a comma out, when do I put a newline.

175
00:10:39.690 --> 00:10:40.900
And literally at that point, I'm done.

176
00:10:42.290 --> 00:10:46.212
I'm done and
it says I wrote the data to gline.js and

177
00:10:46.212 --> 00:10:49.940
open gline.htm in a browser to view.

178
00:10:49.940 --> 00:10:54.940
And so there we are, gline.htm is
in a browser, and we see our data.

179
00:10:57.880 --> 00:11:04.918
So let me just show you briefly the other
version of this, which is gline.py.

180
00:11:04.918 --> 00:11:06.850
It looks almost identical.

181
00:11:06.850 --> 00:11:09.120
We figure out the top ten organizations.

182
00:11:09.120 --> 00:11:12.600
It really comes down to here,

183
00:11:13.790 --> 00:11:18.650
instead of going for the first four
characters, 2010 dash first four.

184
00:11:18.650 --> 00:11:21.078
I'm going 2010 dash seven.

185
00:11:21.078 --> 00:11:24.838
So this is really not the year
anymore it's the month.

186
00:11:24.838 --> 00:11:29.790
So I'm accumulating now at every
month organization position.

187
00:11:29.790 --> 00:11:31.420
The rest of this pretty much works.

188
00:11:31.420 --> 00:11:34.170
I changed the word month to year,
but other than that,

189
00:11:34.170 --> 00:11:35.450
it's pretty much the same code.

190
00:11:35.450 --> 00:11:40.176
I write all this stuff out and
I write it to

191
00:11:40.176 --> 00:11:45.186
gline.js, so I say, python gline.py.

192
00:11:45.186 --> 00:11:45.706
Blink!

193
00:11:45.706 --> 00:11:49.721
Like, again,
it just read a 100 megabytes of stuff,

194
00:11:49.721 --> 00:11:54.010
just that fast because it's so
clever about that.

195
00:11:54.010 --> 00:11:56.450
And if I take a look at the new gline.js.

196
00:11:56.450 --> 00:11:58.930
Let's see if it's been
reloaded in my thing here.

197
00:11:58.930 --> 00:12:01.520
So now it has month and so
you see each of these months.

198
00:12:01.520 --> 00:12:03.500
And you also see that they're not dense.

199
00:12:03.500 --> 00:12:04.956
So, well no, they are dense.

200
00:12:04.956 --> 00:12:07.570
2006, so each month, month, month.

201
00:12:07.570 --> 00:12:10.633
And again I sorted all these so
it comes out really pretty and

202
00:12:10.633 --> 00:12:12.840
these are the different organizations and

203
00:12:12.840 --> 00:12:16.038
the number of email messages in
each of those organizations.

204
00:12:16.038 --> 00:12:20.289
And again that just is going to into I
just hit refresh now because it's going to

205
00:12:20.289 --> 00:12:24.550
read the different JavaScript because
it overwrote that JavaScript.

206
00:12:24.550 --> 00:12:29.946
And so if I do that, now I have
the data on a month-by-month basis for

207
00:12:29.946 --> 00:12:31.536
these same things.

208
00:12:31.536 --> 00:12:36.673
And if I just take a really quick
look to show you gline.htm,

209
00:12:36.673 --> 00:12:41.809
again, I mostly took this from,
I load my data right there,

210
00:12:41.809 --> 00:12:45.450
and then I took most of this stuff.

211
00:12:45.450 --> 00:12:51.570
And I borrowed it from the d3
example on how to build lines, okay?

212
00:12:53.340 --> 00:12:58.340
So, I think we've pretty much covered it.

213
00:12:58.340 --> 00:13:03.470
It's a lot of steps, but by breaking
your data acquisition, data cleanup,

214
00:13:03.470 --> 00:13:08.030
and data visualization into multiple
things, you can actually achieve things.

215
00:13:08.030 --> 00:13:11.484
And the fun is that this is the real work,
this is the real curious work

216
00:13:11.484 --> 00:13:15.313
where you're changing it, refreshing it,
changing it, refreshing it.

217
00:13:15.313 --> 00:13:17.825
And this took one second.

218
00:13:17.825 --> 00:13:19.125
This is three days.

219
00:13:20.355 --> 00:13:21.695
This took one second.

220
00:13:21.695 --> 00:13:27.015
That's how you use this multi-step
process to get to this thing so

221
00:13:27.015 --> 00:13:30.025
that the part that you're
going to do a lot is fast.

222
00:13:30.025 --> 00:13:35.300
And the part that's hard, and dangerous
and error prone, it can be restarted, okay?

223
00:13:35.300 --> 00:13:38.260
So I hope you have fun with this
application and see you on the net.