WEBVTT

1
00:00:09.230 --> 00:00:11.780
Okay, so
now we're going to start from our data.

2
00:00:11.780 --> 00:00:15.570
We're going to do the first phase of the
thing, we're going to pull the data down.

3
00:00:15.570 --> 00:00:19.450
I've changed it so we're talking to 
mbox.dr-chuck.net.

4
00:00:19.450 --> 00:00:20.750
That's my high-performance server

5
00:00:20.750 --> 00:00:24.920
that's carefully cached, and so
we should not be able to crash that.

6
00:00:24.920 --> 00:00:26.480
Let's hope I don't crash that.

7
00:00:26.480 --> 00:00:32.600
We're going to run the gmane.py code and
that's going to produce content.sqlite.

8
00:00:32.600 --> 00:00:37.029
And if you look at this, it's going to seem
really similar to everything else that's

9
00:00:37.029 --> 00:00:41.130
doing any kind of data mining because
it's really focused on simplicity,

10
00:00:41.130 --> 00:00:43.861
URL open, writing the stuff,
putting things in.

11
00:00:43.861 --> 00:00:47.419
And the other thing is I have
already downloaded a real large

12
00:00:47.419 --> 00:00:49.269
copy of content.sqlite and so

13
00:00:49.269 --> 00:00:53.870
it's going to move to the end and
you can either start at the beginning.

14
00:00:53.870 --> 00:00:55.550
I'll actually show you how it
starts in the beginning and

15
00:00:55.550 --> 00:00:58.840
then show you how it starts,
does it at the end.

16
00:00:58.840 --> 00:01:04.142
So, okay, so I have downloaded
pythonlearn.com/code/gmane.zip,

17
00:01:04.142 --> 00:01:05.170
that's there.

18
00:01:05.170 --> 00:01:07.320
And I've unzipped it.

19
00:01:07.320 --> 00:01:11.150
And so if you take a look at my files,

20
00:01:12.200 --> 00:01:17.435
you see that I have here
a very small content.sqlite.

21
00:01:17.435 --> 00:01:19.490
Bob.sqlite, that's the downloaded one.

22
00:01:19.490 --> 00:01:24.250
So for now, now I'm just going
to get rid of content.sqlite.

23
00:01:24.250 --> 00:01:25.810
So I'm going to start with nothing.

24
00:01:26.830 --> 00:01:28.320
And you see, I've unzipped this.

25
00:01:28.320 --> 00:01:30.990
And this is 516 megabytes.

26
00:01:32.060 --> 00:01:34.440
A half a gigabyte of stuff.

27
00:01:34.440 --> 00:01:37.850
It was smaller when I downloaded it,
because that was a zip file.

28
00:01:37.850 --> 00:01:43.190
But I'm going to run gmane.py,
python gmane.py.

29
00:01:43.190 --> 00:01:47.960
And gmane has in it the URL for
what it's going to retrieve.

30
00:01:47.960 --> 00:01:52.990
And it says oh, we have no messages in it,
and so let's just retrieve the first two.

31
00:01:54.410 --> 00:01:55.900
And so now it's retrieving the first two.

32
00:01:56.920 --> 00:01:58.680
Now, we'll do the first 30.

33
00:01:58.680 --> 00:02:02.940
Or, let's do five more, and
it knows to keep on going.

34
00:02:02.940 --> 00:02:05.030
So, it does this, and

35
00:02:05.030 --> 00:02:07.790
there's actually code that I'll show you
in a minute, that we can comment out.

36
00:02:07.790 --> 00:02:10.590
So we'll just hit enter,
and so there we go.

37
00:02:10.590 --> 00:02:13.380
So, there's code if you feel
like making this go faster.

38
00:02:13.380 --> 00:02:16.220
Hopefully we don't crash
the whole Internet by making

39
00:02:16.220 --> 00:02:17.910
this go too much faster.

40
00:02:17.910 --> 00:02:20.430
But if you change the code here,
and here's gmane.py.

41
00:02:20.430 --> 00:02:22.670
And I'll show you in a sec about the code.

42
00:02:22.670 --> 00:02:27.430
So we've got some things here,
and we've got some date code.

43
00:02:27.430 --> 00:02:30.880
We want to be able to parse dates and
tear things apart.

44
00:02:30.880 --> 00:02:33.690
And this is just a bunch of really
complex stuff that I probably got from

45
00:02:33.690 --> 00:02:38.070
stack overflow to parse dates and figure
out what they are because the only thing

46
00:02:38.070 --> 00:02:40.340
I'm really trying to do
is get the date right.

47
00:02:40.340 --> 00:02:43.940
So I'm going to create this
database content.sqlite.

48
00:02:43.940 --> 00:02:46.610
That's if it doesn't exist, let's make it.

49
00:02:46.610 --> 00:02:50.340
Here's the base URL, this is where
we go to get the data from, and

50
00:02:50.340 --> 00:02:55.230
we're going to create a table that has the
id, which is a sequence number within it.

51
00:02:55.230 --> 00:02:59.510
It's going to be unique and we're going to have 
the email itself, that when it was sent at.

52
00:02:59.510 --> 00:03:02.610
That's why I'm kind of cleaning up the dates,
what the subject line is.

53
00:03:02.610 --> 00:03:05.480
And each mail message has header and body.

54
00:03:05.480 --> 00:03:09.035
So if I were to go and
go to one of these URLs, go here and

55
00:03:09.035 --> 00:03:11.019
go to that URL in the browser.

56
00:03:13.539 --> 00:03:15.806
Go to that URL in the browser,

57
00:03:15.806 --> 00:03:21.180
this is going to be a mailing message.
You've been looking at this for a while.

58
00:03:21.180 --> 00:03:23.560
There's the headers and there's the body.

59
00:03:23.560 --> 00:03:27.000
Okay, and the blank line is the break
between headers and the body and

60
00:03:27.000 --> 00:03:31.600
so I'm separating out the headers and
the body because we have to parse them.

61
00:03:31.600 --> 00:03:35.630
So that sets things up but you see I
do create table if it not exists that so

62
00:03:35.630 --> 00:03:37.430
that if it's already
there, it's already there.

63
00:03:37.430 --> 00:03:40.830
Now it then says,
I'm going to figure out where to start, so

64
00:03:40.830 --> 00:03:45.270
so I'm going to select the max of id,
that's SQL, from the Messages.

65
00:03:45.270 --> 00:03:48.440
And this is just a little bit of try and
except stuff to figure out if

66
00:03:48.440 --> 00:03:51.720
we've got some or
if we didn't get any rows whatsoever.

67
00:03:51.720 --> 00:03:55.250
When it's all said and done,
start is zero or the next message.

68
00:03:57.830 --> 00:04:01.670
Okay, so we print that out and
how many messages we want.

69
00:04:01.670 --> 00:04:06.276
So this is a while loop that's going to
run and there's some gaps in the messages,

70
00:04:06.276 --> 00:04:09.230
and so this skip count is
if it sees a blank message,

71
00:04:09.230 --> 00:04:12.211
it goes four more times
before it totally gives up.

72
00:04:12.211 --> 00:04:16.190
And then if it's got four blank messages
in a row, then it actually quits.

73
00:04:16.190 --> 00:04:17.980
You could play with that if you wanted.

74
00:04:17.980 --> 00:04:22.390
So if many's less than one and the first
time through, many is zero, and so

75
00:04:22.390 --> 00:04:23.250
many is less than one.

76
00:04:23.250 --> 00:04:25.820
It asks us for the how many.

77
00:04:25.820 --> 00:04:31.299
And so then start equals start plus 1 so
that is let's go get the next message.

78
00:04:33.030 --> 00:04:36.689
And that just double checks to make
sure that the message we're retrieving

79
00:04:36.689 --> 00:04:39.418
select id for message where
id equals the start guy and

80
00:04:39.418 --> 00:04:42.687
then we're going to fetch a row and
if the row's not none, continue.

81
00:04:42.687 --> 00:04:47.626
All this means is if our starting number
encounters a message that we've already

82
00:04:47.626 --> 00:04:49.450
retrieved before, skip it.

83
00:04:49.450 --> 00:04:51.440
So that's not actually
talking to the network,

84
00:04:51.440 --> 00:04:55.150
that's just a loop that says check them,
check them, check them, check them.

85
00:04:55.150 --> 00:04:58.310
You want to write this code so
it's sort of adaptive to weirdnesses,

86
00:04:58.310 --> 00:05:02.610
because we might have gaps or whatever,
and so that's what this is going to do.

87
00:05:02.610 --> 00:05:05.865
And then this many equals many minus 1,
that's how many messages,

88
00:05:05.865 --> 00:05:08.085
when I said give me 10 messages.

89
00:05:08.085 --> 00:05:14.775
And then URL = baseurl, the baseurl 
plus the start plus a slash plus the end.

90
00:05:14.775 --> 00:05:16.770
That's the syntax of the message.

91
00:05:16.770 --> 00:05:21.205
That's the syntax of the URL that
basically is the start and the end.

92
00:05:21.205 --> 00:05:24.750
And you put the start and
the end, so 3 through 4,

93
00:05:24.750 --> 00:05:26.840
we're going to retrieve
one message at a time.

94
00:05:28.020 --> 00:05:32.100
Now, in all of these situations you
may find that you have some problem

95
00:05:32.100 --> 00:05:34.580
with an SSL certificate
depending on the Python.

96
00:05:34.580 --> 00:05:35.920
Here's a little bit of code.

97
00:05:35.920 --> 00:05:36.690
You can play with it.

98
00:05:36.690 --> 00:05:40.770
If you can't open anything,
you might have to play with this.

99
00:05:40.770 --> 00:05:45.160
I've got it so it's talking non-SSL so
it should work for everything.

100
00:05:45.160 --> 00:05:51.530
And then we open it and we read it and we
check to see the HTTP response code.

101
00:05:51.530 --> 00:05:52.950
If we get something other than 200,

102
00:05:52.950 --> 00:05:56.350
that's probably a bad sign and
then we're just going to quit.

103
00:05:56.350 --> 00:05:59.710
So we break all the way out of
the while loop that's the outside.

104
00:05:59.710 --> 00:06:02.040
We also make it so
we catch keyboard interrupt.

105
00:06:02.040 --> 00:06:06.150
That's except, so we got this try/except
catch, so I can hit control-C.

106
00:06:06.150 --> 00:06:08.658
It'll s interrupted by user and
then it will quit.

107
00:06:08.658 --> 00:06:10.720
If we get any other exception and
we're going to print out, and

108
00:06:10.720 --> 00:06:15.580
this little bit is the bit of code that
makes it so that we can see what it is

109
00:06:15.580 --> 00:06:17.890
because if it can't read it we
should know what's going on.

110
00:06:17.890 --> 00:06:22.230
Hope it didn't introduce any syntax
errors in my writing but that's okay.

111
00:06:22.230 --> 00:06:25.780
Then we at this point if
we've made it this far,

112
00:06:25.780 --> 00:06:29.760
that means that we have opened
the document and we've read the document.

113
00:06:29.760 --> 00:06:34.140
And so at this point, we print the URL
that we just retrieved and the length of

114
00:06:34.140 --> 00:06:39.880
the text and so that's what
you're seeing when it's running.

115
00:06:39.880 --> 00:06:44.480
I print the URL and
the length of the text so

116
00:06:44.480 --> 00:06:49.300
that's each line through, give me
a little feedback that we're doing it.

117
00:06:49.300 --> 00:06:52.220
Then I'm going to find two line feeds.

118
00:06:52.220 --> 00:06:55.390
The line feed at the end of like
the subject line and then the blank line.

119
00:06:55.390 --> 00:06:59.200
This is searching for the blank line and
then I break the header and the body and so

120
00:06:59.200 --> 00:07:04.000
I got the header is up to but that and
to be on that to the end is the body.

121
00:07:04.000 --> 00:07:06.250
Otherwise I complain,
couldn't find the headers and the body.

122
00:07:06.250 --> 00:07:08.846
Probably means that your pointing
at the wrong URL or something.

123
00:07:08.846 --> 00:07:12.522
And if I've successfully,
I reset this skip count to 5

124
00:07:12.522 --> 00:07:16.369
every time I successfully meet a
email message that I like.

125
00:07:16.369 --> 00:07:20.667
And then I use some regular expressions to
retrieve the email message looking for

126
00:07:20.667 --> 00:07:24.902
the from and with the parentheses to
extract non-blank characters, some number,

127
00:07:24.902 --> 00:07:28.700
one or more non-blank characters
followed by an at sign followed by some

128
00:07:28.700 --> 00:07:30.343
more non-blank characters.

129
00:07:30.343 --> 00:07:36.130
And that pulls that out and remember
that findall always retrieves a list.

130
00:07:36.130 --> 00:07:40.300
If we got one thing from the headers,
then we're happy.

131
00:07:40.300 --> 00:07:44.740
And the email is that first thing
that we got, and we can strip it,

132
00:07:44.740 --> 00:07:48.090
we convert it to lowercase, and
we throw away any less thans and

133
00:07:48.090 --> 00:07:50.150
greater thans that happen to be in there.

134
00:07:50.150 --> 00:07:53.390
Otherwise, we have another slightly
different regular expression.

135
00:07:54.570 --> 00:07:55.760
And we see if that one works, and

136
00:07:55.760 --> 00:07:59.190
if it doesn't,
then we didn't find an email address.

137
00:07:59.190 --> 00:08:04.110
Then we read up on the date and we use our
parsing algorithms to figure out the date.

138
00:08:04.110 --> 00:08:08.050
We're just kind of cleaning this stuff up,
and now we go get the subject line.

139
00:08:08.050 --> 00:08:10.590
And we have a regular expression for
the subject line.

140
00:08:10.590 --> 00:08:15.210
If we find one thing from that regular
expression, subject line in the header,

141
00:08:15.210 --> 00:08:16.990
then we grab that sub zero and

142
00:08:16.990 --> 00:08:20.080
we take it to lowercase and
clean all the stuff up.

143
00:08:20.080 --> 00:08:23.130
And then, we've done some parsing of it,
not much.

144
00:08:23.130 --> 00:08:26.970
But we have the email address, when it
was sent cleaned up, and the subject all

145
00:08:26.970 --> 00:08:32.170
cleaned up, and then we insert or ignore
into the Messages that we have the id

146
00:08:32.170 --> 00:08:35.980
which, this is not an autoincrement
ID because these messages sort of have

147
00:08:35.980 --> 00:08:37.830
a natural ID as they come from the server.

148
00:08:37.830 --> 00:08:39.950
So this is message 3.

149
00:08:39.950 --> 00:08:41.520
It will always be message 3.

150
00:08:41.520 --> 00:08:45.790
And if we go to message 12 to 13,
well, this is going to be message 12.

151
00:08:45.790 --> 00:08:48.250
So we don't really need an autoincrement.

152
00:08:48.250 --> 00:08:51.250
So you'll note that this is
not an autoincrement field.

153
00:08:51.250 --> 00:08:54.470
We just use the message position
that we just retrieved.

154
00:08:54.470 --> 00:08:59.590
Got the email, sent_at, subject, header,
and body, and then we insert it.

155
00:08:59.590 --> 00:09:01.930
So this is something that you might find.

156
00:09:02.950 --> 00:09:04.080
Normally through these loops,

157
00:09:04.080 --> 00:09:07.390
I'm committing all the time,
but this is a trick.

158
00:09:07.390 --> 00:09:10.850
So many is how many we're doing, and

159
00:09:10.850 --> 00:09:14.910
what I'm saying here is if many
divided by 50, the remainder is zero.

160
00:09:14.910 --> 00:09:16.340
That's what this is saying.

161
00:09:16.340 --> 00:09:18.250
Divided by 50, take the remainder.

162
00:09:18.250 --> 00:09:20.910
That means every 50th record,
we're going to do a commit.

163
00:09:22.050 --> 00:09:24.380
So that'll speed this process up.

164
00:09:24.380 --> 00:09:27.140
It'll make it so
your hard drive won't heat up as much.

165
00:09:27.140 --> 00:09:28.600
So we're not committing every single time.

166
00:09:28.600 --> 00:09:30.650
We're going to retrieve 50 records.

167
00:09:30.650 --> 00:09:34.080
Now, here's the thing that you can change.

168
00:09:34.080 --> 00:09:35.710
Then, it waits a second and sleeps.

169
00:09:35.710 --> 00:09:37.970
But we're like,
we'll just comment that out.

170
00:09:37.970 --> 00:09:39.260
We're not going to wait it out.

171
00:09:39.260 --> 00:09:41.160
Let's hope we don't crash
the Internet by doing this.

172
00:09:41.160 --> 00:09:44.760
And then what we're going to do, it's still
going to commit every 50th record.

173
00:09:44.760 --> 00:09:46.740
But it's going to go a lot faster now.

174
00:09:46.740 --> 00:09:49.930
And then we commit at very end and
then we close our connection.

175
00:09:49.930 --> 00:09:51.910
And so that's the basic loop 
that we're running.

176
00:09:51.910 --> 00:09:55.620
And so, let's hope I didn't introduce
any syntax errors with my editing.

177
00:09:55.620 --> 00:09:57.430
We'll find out soon enough.

178
00:09:57.430 --> 00:10:00.550
So now,
let me retrieve this python gmane.py.

179
00:10:00.550 --> 00:10:05.410
We're going to start at message 7 and
let me get ten messages and

180
00:10:05.410 --> 00:10:07.080
see how fast it goes.

181
00:10:07.080 --> 00:10:08.630
Zoom.
So you see how much it goes.

182
00:10:08.630 --> 00:10:09.510
It goes much faster.

183
00:10:09.510 --> 00:10:12.030
So, if you're going to try to
download a bunch of stuff,

184
00:10:12.030 --> 00:10:14.890
you probably want to turn
off that error message, right?

185
00:10:14.890 --> 00:10:16.540
So, I'll do ten more.

186
00:10:16.540 --> 00:10:17.540
It's pretty fast.

187
00:10:17.540 --> 00:10:18.870
A lot faster.

188
00:10:18.870 --> 00:10:24.140
Okay, so now what I'm going to do
is get out of there, ls -l.

189
00:10:24.140 --> 00:10:26.383
And so you see the content, .sqlite.

190
00:10:26.383 --> 00:10:31.354
I'm going to remove it,
delete it, content.sqlite.

191
00:10:31.354 --> 00:10:34.240
It'd be del on Windows.

192
00:10:34.240 --> 00:10:37.666
And then I'm going to rename it.
It would be be ren on Windows,

193
00:10:37.666 --> 00:10:42.971
move bob.sqlite to content.sqlite.

194
00:10:44.971 --> 00:10:48.068
So if I do an ls -l now,
the content.sqlite is

195
00:10:48.068 --> 00:10:54.010
this giant half a gigabyte of stuff
that I downloaded and unzipped.

196
00:10:54.010 --> 00:10:59.285
So now what happens is because gmane.py,
let's take a look at that,

197
00:10:59.285 --> 00:11:04.845
gmane.py, the first thing it does here,
select max id from Messages,

198
00:11:04.845 --> 00:11:09.900
it's going to go to the end and
it's going to start at the very end.

199
00:11:09.900 --> 00:11:15.259
So I've got a half a gig and
I will say, python gmane.py,

200
00:11:15.259 --> 00:11:18.731
so now it's got a half a gig of stuff.

201
00:11:18.731 --> 00:11:22.970
And it says oh, the highest message is 52450.

202
00:11:22.970 --> 00:11:24.950
Let me go get 10 more.

203
00:11:24.950 --> 00:11:27.270
So you'll see it starts there and
just keeps on going.

204
00:11:27.270 --> 00:11:31.340
So you would download this, and you
don't have to download the first 50,000.

205
00:11:31.340 --> 00:11:33.630
Let's go like 30 more, let's keep on going.

206
00:11:33.630 --> 00:11:35.330
And so you'll be doing this.

207
00:11:35.330 --> 00:11:41.040
And you literally,
you can say, Again, I warn you.

208
00:11:41.040 --> 00:11:43.410
Don't do this if you have
an expensive network connection or

209
00:11:43.410 --> 00:11:45.070
a slow network connection.

210
00:11:45.070 --> 00:11:47.920
Or if you're at a workplace where they're
like how come you just downloaded

211
00:11:47.920 --> 00:11:50.080
a gigabyte of API stuff.

212
00:11:50.080 --> 00:11:54.094
But I have done this where
I just go the next 10,000.

213
00:11:54.094 --> 00:11:58.030
Usually what happens is my
computer goes to sleep before, but

214
00:11:58.030 --> 00:12:02.369
it will, if it stays up it
will go get 10,000 messages.

215
00:12:03.590 --> 00:12:07.140
And here you could type control-C and we're
going to actually try and catch this.

216
00:12:07.140 --> 00:12:10.190
Now the interesting thing is it's
only committing every 50 messages.

217
00:12:10.190 --> 00:12:13.160
So I'm not going to get probably
many of this unless I wait for 50.

218
00:12:15.599 --> 00:12:18.547
Something you could do
is go put a commit in,

219
00:12:18.547 --> 00:12:21.590
actually it’s going to
commit at the very end.

220
00:12:21.590 --> 00:12:25.250
So it’s going to try and
except, do a break, and I'll hit control-C,

221
00:12:25.250 --> 00:12:26.750
interrupted by the user.

222
00:12:26.750 --> 00:12:28.890
So let's take a look at
where that happened there.

223
00:12:28.890 --> 00:12:30.240
So it was doing something.

224
00:12:31.960 --> 00:12:33.530
Program interrupted by user.

225
00:12:35.110 --> 00:12:36.490
Yeah, because it was in the middle of a,

226
00:12:36.490 --> 00:12:38.880
if it wasn't  in the middle of reading
a document it wouldn't have worked,

227
00:12:38.880 --> 00:12:42.470
and reading a webpage it wouldn't work,
but it caught this keyboard interrupt.

228
00:12:42.470 --> 00:12:47.612
And then it did a break, and
then it means that it's exiting.

229
00:12:47.612 --> 00:12:49.030
And then I commit at the very end 
and I select

230
00:12:49.030 --> 00:12:55.200
So I got actually this very last guy,
52608 made it because it popped out.

231
00:12:55.200 --> 00:12:59.740
Now if I hit the control-C the wrong way,
it might have caught it somewhere else in

232
00:12:59.740 --> 00:13:01.590
the code that wasn't in
the middle of a try and

233
00:13:01.590 --> 00:13:04.900
except block and
then I would have lost up to the last 50.

234
00:13:04.900 --> 00:13:08.730
But you could tweak these numbers and
if you're writing your own code,

235
00:13:08.730 --> 00:13:12.730
you would probably put commits elsewhere
and you might put all this other stuff

236
00:13:12.730 --> 00:13:17.470
inside of a try-catch block so you could
catch failures or aborts or whatever.

237
00:13:17.470 --> 00:13:20.970
I don't know but you get the concept that
you don't have to commit every single

238
00:13:20.970 --> 00:13:23.480
record like I've done on
some of the other things.

239
00:13:23.480 --> 00:13:25.010
It's safe to commit to every record, but

240
00:13:25.010 --> 00:13:29.905
then your hard drive, especially if you
turn off this time sleep one, your hard

241
00:13:29.905 --> 00:13:33.005
drive gets a little heated up, it's like
it's committing, committing, committing.

242
00:13:33.005 --> 00:13:34.829
It's like [SOUND] and then commit.

243
00:13:34.829 --> 00:13:35.771
[SOUND] and then commit.

244
00:13:35.771 --> 00:13:39.825
So at the end of the day,
that is what we see.

245
00:13:39.825 --> 00:13:43.015
And we can just take a quick
look at the data that's in there

246
00:13:43.015 --> 00:13:44.005
a couple of different ways.

247
00:13:44.005 --> 00:13:48.315
Let me just use SQLite Browser and
I'm going to open a database and

248
00:13:48.315 --> 00:13:51.930
I'm going to go to content.sqlite and
open it.

249
00:13:51.930 --> 00:13:56.040
Now expect that your computer
is going to spin for a while.

250
00:13:56.040 --> 00:13:59.220
It is, when I go and

251
00:13:59.220 --> 00:14:04.670
try to map the messages,
see that computer's kind of sleeping.

252
00:14:04.670 --> 00:14:06.450
And if you don't, this is a fast computer.

253
00:14:06.450 --> 00:14:07.330
You might take a while.

254
00:14:07.330 --> 00:14:12.155
And so if you scroll down and
you see, okay, 52608,

255
00:14:12.155 --> 00:14:16.403
that is the message we've got here, 52608.

256
00:14:16.403 --> 00:14:19.860
That waas the last message we loaded so
we actually made it to the database.

257
00:14:19.860 --> 00:14:23.750
So that's one way for you to look at it,
and if you look at these record, you see

258
00:14:23.750 --> 00:14:28.210
we've got the email address, the sent at,
the subject, the header, and the body.

259
00:14:29.890 --> 00:14:35.290
And so there we go. We parse that and
if we start that back up, away we go.

260
00:14:35.290 --> 00:14:36.770
Okay?

261
00:14:36.770 --> 00:14:40.148
So up next we're going to
take this content.sqlite and

262
00:14:40.148 --> 00:14:43.450
then we're going to make it
in a much more compressed

263
00:14:43.450 --> 00:14:47.820
form in much more efficient form
using the gmodel.py application.